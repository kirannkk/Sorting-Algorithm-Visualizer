HTML


<!DOCTYPE html>


<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sorting Visualizer</title>

    <link rel="stylesheet" href="./css/style.css">

</head>
<body>

    <header>
        <nav>
            <div class="array-inputs">
                <p>Size of the array:</p>
                <input id="a_size" type="range" min=20 max=150 step=1 value=80>
                <p>Speed of the algorithm:</p>
                <input id="a_speed" type="range" min=1 max=5 step=1 value=4>
                <button id="a_generate">Generate New Array!</button>
            </div>
            


            <div class="header_right">
                <p class="nav-heading">Sorting visualizer</p>

                <div class="algos">
                    <button >Bubble</button>
                    <button >Selection</button>
                    <button >Insertion</button>
                    
                    
                </div>
            </div>

        </nav>
    </header>

    <section>

        <div id="Info_Cont1">

            <h3>TIME COMPLEXITY</h3>

            <div class="Complexity_Containers" id="Time_Complexity_Types_Container">

                <div class="Pair_Definitions">
                    <p class="Sub_Heading">Worst case:</p>
                    <p id="Time_Worst"></p>
                </div>
                
                <div class="Pair_Definitions">
                    <p class="Sub_Heading">Average case:</p>
                    <p id="Time_Average"></p>
                </div>
                
                <div class="Pair_Definitions">
                    <p class="Sub_Heading">Best case:</p>
                    <p id="Time_Best"></p>
                </div>

            </div>

        </div>

        <div id="array_container">
            
        </div>

        <div id="Info_Cont2">

            <h3>SPACE COMPLEXITY</h3>

            <div class="Complexity_Containers" id="Space_Complexity_Types_Container">

                <div class="Pair_Definitions">
                    <p class="Sub_Heading">Worst case:</p>
                    <p id="Space_Worst"></p>
                </div>
                
            </div>

        </div>

    </section>

    <footer>

    </footer>

    <script src="./script/main.js"></script>   <!--This should be at the end of body and should be loaded before sorts.js-->
    <script src="./script/visualization.js"></script>  <!--This should be loaded after main.js-->

    <script src="./script/bubblesort.js"></script>
    <script src="./script/insertionsort.js"></script>
    <script src="./script/selectionsort.js"></script>
   
</body>



</html>


CSS

* {
    margin: 0px;
    padding: 0px;
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    font-size: large;
    font-weight: bold;
    text-transform: uppercase;
  }
  
  nav {
    background-color: #3b3a3a;
    color: white;
    display: -ms-grid;
    display: grid;
    -ms-grid-columns: 30% 60%;
        grid-template-columns: 30% 60%;
    -webkit-column-gap: 10%;
            column-gap: 10%;
    padding: 0% 5%;
  }
  
  nav .array-inputs {
    display: -ms-grid;
    display: grid;
    -ms-grid-columns: 60% 40%;
        grid-template-columns: 60% 40%;
    place-content: center;
    padding: 5% 0%;
  }
  
  nav .array-inputs #a_size {
    padding: 5% 0%;
  }
  
  nav .array-inputs #a_speed {
    padding: 5% 0%;
  }
  
  nav .array-inputs #a_generate {
    background-color: transparent;
    border: none;
    outline: none;
    color: white;
    padding: 4% 0% 0% 0%;
    padding-left: 20%;
  }
  
  nav .array-inputs #a_generate:hover {
    cursor: pointer;
  }
  
  nav .header_right {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;
  }
  
  nav .header_right .nav-heading {
    display: inline-block;
    font-size: xxx-large;
    padding: 3% 0%;
  }
  
  nav .header_right .algos {
    display: -ms-grid;
    display: grid;
    -ms-grid-columns: (20%)[6];
        grid-template-columns: repeat(6, 20%);
    place-content: center;
    padding: 2% 0%;
  }
  
  nav .header_right .algos button {
    background-color: transparent;
    border: none;
    color: white;
    outline: none;
    padding: 5% 0%;
    font-size: x-large;
  }
  
  nav .header_right .algos button:hover {
    background-color: blue;
    cursor: pointer;
  }
  
  nav .header_right .algos .butt_locked {
    background-color: transparent;
    cursor: pointer;
  }
  
  nav .header_right .algos .butt_locked:hover {
    background-color: transparent;
    cursor: pointer;
  }
  
  nav .header_right .algos .butt_selected {
    background-color: white;
    color: green;
  }
  
  nav .header_right .algos .butt_selected:hover {
    background-color: white;
    cursor: pointer;
  }
  
  nav .header_right .algos .butt_unselected:hover {
    background-color: blue;
    cursor: pointer;
  }
  
  section {
    display: -ms-grid;
    display: grid;
    -ms-grid-columns: 20% 60% 20%;
        grid-template-columns: 20% 60% 20%;
  }
  
  section .Complexity_Containers {
    margin-top: 20%;
  }
  
  section .Complexity_Containers .Pair_Definitions {
    margin-top: 20%;
  }
  
  section .Complexity_Containers .Pair_Definitions p {
    display: inline;
  }
  
  section .Complexity_Containers .Pair_Definitions p.Sub_Heading {
    font-size: medium;
    text-transform: none;
  }
  
  section #Info_Cont1 {
    padding: 20% 10%;
  }
  
  section #Info_Cont1 h3 {
    text-decoration: underline;
  }
  
  section #array_container {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    width: 100%;
    height: 70vh;
  }
  
  section #Info_Cont2 {
    padding: 20% 10%;
  }
  
  section #Info_Cont2 h3 {
    text-decoration: underline;
  }
  
  .hide {
    display: none;
  }
  

JAVASCRIPT

BUBBLE SORT


function Bubble()
{
    //Setting Time complexities
    document.getElementById("Time_Worst").innerText="O(N^2)";
    document.getElementById("Time_Average").innerText="Θ(N^2)";
    document.getElementById("Time_Best").innerText="Ω(N)";

    //Setting Space complexity
    document.getElementById("Space_Worst").innerText="O(1)";

    c_delay=0;

    for(var i=0;i<array_size-1;i++)
    {
        for(var j=0;j<array_size-i-1;j++)
        {
            div_update(divs[j],div_sizes[j],"yellow");//Color update

            if(div_sizes[j]>div_sizes[j+1])
            {
                div_update(divs[j],div_sizes[j], "red");//Color update
                div_update(divs[j+1],div_sizes[j+1], "red");//Color update

                var temp=div_sizes[j];
                div_sizes[j]=div_sizes[j+1];
                div_sizes[j+1]=temp;

                div_update(divs[j],div_sizes[j], "red");//Height update
                div_update(divs[j+1],div_sizes[j+1], "red");//Height update
            }
            div_update(divs[j],div_sizes[j], "blue");//Color updat
        }
        div_update(divs[j],div_sizes[j], "green");//Color update
    }
    div_update(divs[0],div_sizes[0], "green");//Color update

    enable_buttons();
}


SELECTION SORT


function Selection_sort()
{
    //Setting Time complexities
    document.getElementById("Time_Worst").innerText="O(N^2)";
    document.getElementById("Time_Average").innerText="Θ(N^2)";
    document.getElementById("Time_Best").innerText="Ω(N^2)";

    //Setting Space complexity
    document.getElementById("Space_Worst").innerText="O(1)";

    c_delay=0;

    for(var i=0;i<array_size-1;i++)
    {
        div_update(divs[i],div_sizes[i],"red");//Color update

        index_min=i;

        for(var j=i+1;j<array_size;j++)
        {
            div_update(divs[j],div_sizes[j],"yellow");//Color update

            if(div_sizes[j]<div_sizes[index_min])
            {
                if(index_min!=i)
                {
                    div_update(divs[index_min],div_sizes[index_min],"blue");//Color update
                }
                index_min=j;
                div_update(divs[index_min],div_sizes[index_min],"red");//Color update
            }
            else
            {
                div_update(divs[j],div_sizes[j],"blue");//Color update
            }
        }
        
        if(index_min!=i)
        {
            var temp=div_sizes[index_min];
            div_sizes[index_min]=div_sizes[i];
            div_sizes[i]=temp;

            div_update(divs[index_min],div_sizes[index_min],"red");//Height update
            div_update(divs[i],div_sizes[i],"red");//Height update
            div_update(divs[index_min],div_sizes[index_min],"blue");//Color update
        }
        div_update(divs[i],div_sizes[i],"green");//Color update
    }
    div_update(divs[i],div_sizes[i],"green");//Color update

    enable_buttons();
}


INSERTION SORT


function Insertion()
{
    //Setting Time complexities
    document.getElementById("Time_Worst").innerText="O(N^2)";
    document.getElementById("Time_Average").innerText="Θ(N^2)";
    document.getElementById("Time_Best").innerText="Ω(N)";

    //Setting Space complexity
    document.getElementById("Space_Worst").innerText="O(1)";

    c_delay=0;

    for(var j=0;j<array_size;j++)
    {
        div_update(divs[j],div_sizes[j],"yellow");//Color update

        var key= div_sizes[j];
        var i=j-1;
        while(i>=0 && div_sizes[i]>key)
        {
            div_update(divs[i],div_sizes[i],"red");//Color update
            div_update(divs[i+1],div_sizes[i+1],"red");//Color update

            div_sizes[i+1]=div_sizes[i];

            div_update(divs[i],div_sizes[i],"red");//Height update
            div_update(divs[i+1],div_sizes[i+1],"red");//Height update
    
            div_update(divs[i],div_sizes[i],"blue");//Color update
            if(i==(j-1))
            {
                div_update(divs[i+1],div_sizes[i+1],"yellow");//Color update
            }
            else
            {
                div_update(divs[i+1],div_sizes[i+1],"blue");//Color update
            }
            i-=1;
        }
        div_sizes[i+1]=key;

        for(var t=0;t<j;t++)
        {
            div_update(divs[t],div_sizes[t],"green");//Color update
        }
    }
    div_update(divs[j-1],div_sizes[j-1],"green");//Color update

    enable_buttons();
}


MAIN.JS

//Variables (BE CAREFUL THESE MIGHT BE USED IN OTHER JS FILES TOO)
var inp_as=document.getElementById('a_size'),array_size=inp_as.value;
var inp_gen=document.getElementById("a_generate");
var inp_aspeed=document.getElementById("a_speed");
//var array_speed=document.getElementById('a_speed').value;

var butts_algos=document.querySelectorAll(".algos button");

var div_sizes=[];
var divs=[];
var margin_size;
var cont=document.getElementById("array_container");
cont.style="flex-direction:row";

//Array generation and updation.

inp_gen.addEventListener("click",generate_array);
inp_as.addEventListener("input",update_array_size);

function generate_array()
{
    cont.innerHTML="";

    for(var i=0;i<array_size;i++)
    {
        div_sizes[i]=Math.floor(Math.random() * 0.5*(inp_as.max - inp_as.min) ) + 10;
        divs[i]=document.createElement("div");
        cont.appendChild(divs[i]);
        margin_size=0.1;
        divs[i].style=" margin:0% " + margin_size + "%; background-color:blue; width:" + (100/array_size-(2*margin_size)) + "%; height:" + (div_sizes[i]) + "%;";
    }
}

function update_array_size()
{
    array_size=inp_as.value;
    generate_array();
}

window.onload=update_array_size();

//Running the appropriate algorithm.
for(var i=0;i<butts_algos.length;i++)
{
    butts_algos[i].addEventListener("click",runalgo);
}

function disable_buttons()
{
    for(var i=0;i<butts_algos.length;i++)
    {
        butts_algos[i].classList=[];
        butts_algos[i].classList.add("butt_locked");

        butts_algos[i].disabled=true;
        inp_as.disabled=true;
        inp_gen.disabled=true;
        inp_aspeed.disabled=true;
    }
}

function runalgo()
{
    disable_buttons();

    this.classList.add("butt_selected");
    switch(this.innerHTML)
    {
        case "Bubble":Bubble();
                        break;
        case "Selection":Selection_sort();
                        break;
        case "Insertion":Insertion();
                        break;
        case "Merge":Merge();
                        break;
       
    }
}


VISUALIZAR