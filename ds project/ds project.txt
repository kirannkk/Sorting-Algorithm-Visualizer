8. Program to convert infix notation to postfix notation using stacks.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 100

// Define a structure for the stack
struct Stack {
    char items[MAX_SIZE];
    int top;
};

// Function to initialize the stack
void initialize(struct Stack* stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to push an item onto the stack
void push(struct Stack* stack, char item) {
    if (stack->top == MAX_SIZE - 1) {
        printf("Stack is full. Cannot push %c\n", item);
        exit(1);
    }
    stack->items[++stack->top] = item;
}

// Function to pop an item from the stack
char pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot pop.\n");
        exit(1);
    }
    return stack->items[stack->top--];
}

// Function to get the precedence of an operator
int getPrecedence(char op) {
    if (op == '+' || op == '-') {
        return 1;
    } else if (op == '*' || op == '/') {
        return 2;
    }
    return 0;
}

// Function to convert infix expression to postfix notation
void infixToPostfix(char infix[], char postfix[]) {
    struct Stack stack;
    initialize(&stack);

    int i, j = 0;
    for (i = 0; infix[i]; i++) {
        if (infix[i] == ' ' || infix[i] == '\t') {
            continue;
        } else if (isdigit(infix[i])) {
            while (isdigit(infix[i])) {
                postfix[j++] = infix[i++];
            }
            postfix[j++] = ' ';
            i--;
        } else if (infix[i] == '(') {
            push(&stack, '(');
        } else if (infix[i] == ')') {
            while (!isEmpty(&stack) && stack.items[stack.top] != '(') {
                postfix[j++] = pop(&stack);
                postfix[j++] = ' ';
            }
            pop(&stack); // Pop '('
        } else {
            while (!isEmpty(&stack) && getPrecedence(stack.items[stack.top]) >= getPrecedence(infix[i])) {
                postfix[j++] = pop(&stack);
                postfix[j++] = ' ';
            }
            push(&stack, infix[i]);
        }
    }
    while (!isEmpty(&stack)) {
        postfix[j++] = pop(&stack);
        postfix[j++] = ' ';
    }
    postfix[j] = '\0';
}

int main() {
    char infix[100];
    char postfix[100];

    printf("Enter an infix expression: ");
    gets(infix); // Use gets() for simplicity, but it's not recommended in practice.

    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);

    return 0;
}

9.Program to implement queue using arrays.

#include <stdio.h>

#define MAX_SIZE 10

int queue[MAX_SIZE];
int front = -1;
int rear = -1;

int isFull() {
    return (rear == MAX_SIZE - 1);
}

int isEmpty() {
    return (front == -1 || front > rear);
}

void enqueue(int item) {
    if (isFull()) {
        printf("Queue is full. Cannot enqueue %d\n", item);
        return;
    } else {
        if (front == -1) {
            front = 0;
        }
        queue[++rear] = item;
        printf("Enqueued %d to the queue\n", item);
    }
}

int dequeue() {
    if (isEmpty()) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;
    } else {
        int item = queue[front++];
        if (front > rear) {
            front = rear = -1;
        }
        printf("Dequeued %d from the queue\n", item);
        return item;
    }
}

void display() {
    if (isEmpty()) {
        printf("Queue is empty.\n");
    } else {
        printf("Queue Elements: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

int main() {
    enqueue(5);
    enqueue(3);
    display();
    
    dequeue();
    display();
    
    return 0;
}

10. Program to implement queue using pointer.

#include <stdio.h>
#include <stdlib.h>

// Define a structure for a queue node
struct Node {
    int data;
    struct Node* next;
};

struct Node* front = NULL;
struct Node* rear = NULL;

// Function to check if the queue is empty
int isEmpty() {
    return front == NULL;
}

// Function to enqueue an item
void enqueue(int item) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = item;
    newNode->next = NULL;
    
    if (isEmpty()) {
        front = rear = newNode;
    } else {
        rear->next = newNode;
        rear = newNode;
    }
    
    printf("Enqueued %d to the queue\n", item);
}

// Function to dequeue an item
int dequeue() {
    if (isEmpty()) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;
    }
    
    struct Node* temp = front;
    int item = temp->data;
    
    if (front == rear) {
        front = rear = NULL;
    } else {
        front = front->next;
    }
    
    free(temp);
    
    printf("Dequeued %d from the queue\n", item);
    return item;
}

// Function to display the queue elements
void display() {
    if (isEmpty()) {
        printf("Queue is empty.\n");
    } else {
        printf("Queue Elements: ");
        struct Node* current = front;
        while (current != NULL) {
            printf("%d ", current->data);
            current = current->next;
        }
        printf("\n");
    }
}

int main() {
    enqueue(5);
    enqueue(3);
    display();
    
    dequeue();
    display();
    
    return 0;
}

11. Program to reverse elements in a queue.

#include <stdio.h>
#include <stdlib.h>

// Define a structure for a queue node
struct Node {
    int data;
    struct Node* next;
};

struct Node* front = NULL;
struct Node* rear = NULL;

// Function to check if the queue is empty
int isEmpty() {
    return front == NULL;
}

// Function to enqueue an item
void enqueue(int item) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = item;
    newNode->next = NULL;
    
    if (isEmpty()) {
        front = rear = newNode;
    } else {
        rear->next = newNode;
        rear = newNode;
    }
}

// Function to dequeue an item
int dequeue() {
    if (isEmpty()) {
        return -1; // Return a sentinel value to indicate an empty queue.
    }
    
    struct Node* temp = front;
    int item = temp->data;
    
    if (front == rear) {
        front = rear = NULL;
    } else {
        front = front->next;
    }
    
    free(temp);
    
    return item;
}

// Function to reverse the elements in the queue
void reverseQueue() {
    struct Node* prev = NULL;
    struct Node* current = front;
    struct Node* nextNode;
    
    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    
    front = prev;
}

// Function to display the queue elements
void display() {
    if (isEmpty()) {
        printf("Queue is empty.\n");
    } else {
        struct Node* current = front;
        while (current != NULL) {
            printf("%d ", current->data);
            current = current->next;
        }
        printf("\n");
    }
}

int main() {
    // Enqueue elements into the queue
    enqueue(5);
    enqueue(3);
    enqueue(8);
    
    printf("Original Queue: ");
    display();
    
    // Reverse the queue
    reverseQueue();
    
    printf("Reversed Queue: ");
    display();
    
    return 0;
}

12. Program to implement circular queue using arrays.

#include <stdio.h>

#define MAX_SIZE 5  // Maximum size of the circular queue

int circularQueue[MAX_SIZE];
int front = -1;
int rear = -1;

int isFull() {
    if (front == 0 && rear == MAX_SIZE - 1)
        return 1;
    if (front == rear + 1)
        return 1;
    return 0;
}

int isEmpty() {
    if (front == -1)
        return 1;
    return 0;
}

void enqueue(int item) {
    if (isFull()) {
        printf("Circular queue is full. Cannot enqueue %d\n", item);
        return;
    } else {
        if (front == -1)
            front = 0;
        rear = (rear + 1) % MAX_SIZE;
        circularQueue[rear] = item;
        printf("Enqueued %d to the circular queue\n", item);
    }
}

int dequeue() {
    int item;
    if (isEmpty()) {
        printf("Circular queue is empty. Cannot dequeue.\n");
        return -1;
    } else {
        item = circularQueue[front];
        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % MAX_SIZE;
        }
        printf("Dequeued %d from the circular queue\n", item);
        return item;
    }
}

void display() {
    int i;
    if (isEmpty()) {
        printf("Circular queue is empty.\n");
    } else {
        printf("Circular Queue Elements: ");
        for (i = front; i != rear; i = (i + 1) % MAX_SIZE) {
            printf("%d ", circularQueue[i]);
        }
        printf("%d\n", circularQueue[i]);
    }
}

int main() {
    enqueue(5);
    enqueue(3);
    enqueue(8);
    display();
    
    dequeue();
    display();
    
    enqueue(10);
    enqueue(7);
    display();
    
    enqueue(9);  // This will cause the circular queue to become full
    display();
    
    dequeue();
    dequeue();
    display();
    
    enqueue(4);
    enqueue(6);
    display();
    
    return 0;
}

13.  Program to create add remove & display element from single linked list.

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to add a node to the end of the linked list
void appendNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to remove a node with a given data value
void removeNode(struct Node** head, int data) {
    if (*head == NULL) {
        printf("List is empty. Cannot remove.\n");
        return;
    }

    struct Node* current = *head;
    struct Node* prev = NULL;

    while (current != NULL && current->data != data) {
        prev = current;
        current = current->next;
    }

    if (current == NULL) {
        printf("Element not found. Cannot remove.\n");
    } else {
        if (prev == NULL) {
            *head = current->next;
        } else {
            prev->next = current->next;
        }
        free(current);
        printf("Removed %d from the list.\n", data);
    }
}

// Function to display the linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
    } else {
        printf("Linked List: ");
        while (head != NULL) {
            printf("%d -> ", head->data);
            head = head->next;
        }
        printf("NULL\n");
    }
}

int main() {
    struct Node* head = NULL;

    appendNode(&head, 5);
    appendNode(&head, 3);
    appendNode(&head, 8);

    displayList(head);

    removeNode(&head, 3);
    displayList(head);

    removeNode(&head, 10);  // Element not in the list
    displayList(head);

    return 0;
}

14. Program to create add remove & display element from double linked list.

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a doubly linked list node
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// Function to add a node to the end of the doubly linked list
void appendNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
        newNode->prev = current;
    }
}

// Function to remove a node with a given data value
void removeNode(struct Node** head, int data) {
    if (*head == NULL) {
        printf("List is empty. Cannot remove.\n");
        return;
    }

    struct Node* current = *head;

    while (current != NULL && current->data != data) {
        current = current->next;
    }

    if (current == NULL) {
        printf("Element not found. Cannot remove.\n");
    } else {
        if (current->prev != NULL) {
            current->prev->next = current->next;
        } else {
            *head = current->next;
        }

        if (current->next != NULL) {
            current->next->prev = current->prev;
        }

        free(current);
        printf("Removed %d from the list.\n", data);
    }
}

// Function to display the doubly linked list in both forward and reverse order
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    printf("Forward: ");
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");

    printf("Reverse: ");
    while (head->prev != NULL) {
        head = head->prev;
    }
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

    appendNode(&head, 5);
    appendNode(&head, 3);
    appendNode(&head, 8);

    displayList(head);

    removeNode(&head, 3);
    displayList(head);

    removeNode(&head, 10);  // Element not in the list
    displayList(head);

    return 0;
}

15. Program to count number of nodes in linear linked list.

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to count the number of nodes in the linked list
int countNodes(struct Node* head) {
    int count = 0;
    while (head != NULL) {
        count++;
        head = head->next;
    }
    return count;
}

int main() {
    struct Node* head = createNode(5);
    head->next = createNode(3);
    head->next->next = createNode(8);

    int count = countNodes(head);

    printf("Number of nodes in the linked list: %d\n", count);

    return 0;
}

16. Program to create add remove & display element from circular linked list.

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a circular linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to add a node to the end of the circular linked list
void appendNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        newNode->next = *head; // Make it point to itself to create a circular list
    } else {
        struct Node* current = *head;
        while (current->next != *head) {
            current = current->next;
        }
        current->next = newNode;
        newNode->next = *head;
    }
}

// Function to remove a node with a given data value
void removeNode(struct Node** head, int data) {
    if (*head == NULL) {
        printf("List is empty. Cannot remove.\n");
        return;
    }

    struct Node* current = *head;
    struct Node* prev = NULL;
    
    int found = 0; // To track if the element was found and removed

    do {
        if (current->data == data) {
            if (current == *head) {
                *head = current->next;
            }
            if (prev != NULL) {
                prev->next = current->next;
            }
            free(current);
            found = 1;
            break;
        }
        prev = current;
        current = current->next;
    } while (current != *head);

    if (!found) {
        printf("Element not found. Cannot remove.\n");
    }
}

// Function to display the circular linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
    } else {
        struct Node* current = head;
        do {
            printf("%d -> ", current->data);
            current = current->next;
        } while (current != head);
        printf("\n");
    }
}

int main() {
    struct Node* head = NULL;

    appendNode(&head, 5);
    appendNode(&head, 3);
    appendNode(&head, 8);

    displayList(head);

    removeNode(&head, 3);
    displayList(head);

    removeNode(&head, 10);  // Element not in the list
    displayList(head);

    return 0;
}

17. Programs to implement stack & queues using linked representation .

for stack

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a stack node
struct Node {
    int data;
    struct Node* next;
};

struct Node* top = NULL; // Initialize the top of the stack

// Function to push an element onto the stack
void push(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed. Cannot push.\n");
        return;
    }
    newNode->data = data;
    newNode->next = top;
    top = newNode;
}

// Function to pop an element from the stack
int pop() {
    if (top == NULL) {
        printf("Stack is empty. Cannot pop.\n");
        return -1;
    }
    struct Node* temp = top;
    int data = temp->data;
    top = top->next;
    free(temp);
    return data;
}

// Function to check if the stack is empty
int isEmpty() {
    return top == NULL;
}

// Function to display the stack elements
void display() {
    struct Node* current = top;
    printf("Stack: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    push(5);
    push(3);
    push(8);

    display();

    int popped = pop();
    printf("Popped: %d\n", popped);

    display();

    return 0;
}

for queue

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a queue node
struct Node {
    int data;
    struct Node* next;
};

struct Node* front = NULL;
struct Node* rear = NULL;

// Function to check if the queue is empty
int isEmpty() {
    return front == NULL;
}

// Function to enqueue an element
void enqueue(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed. Cannot enqueue.\n");
        return;
    }
    newNode->data = data;
    newNode->next = NULL;
    if (isEmpty()) {
        front = rear = newNode;
    } else {
        rear->next = newNode;
        rear = newNode;
    }
}

// Function to dequeue an element
int dequeue() {
    if (isEmpty()) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;
    }
    struct Node* temp = front;
    int data = temp->data;
    front = front->next;
    free(temp);
    if (front == NULL) {
        rear = NULL;
    }
    return data;
}

// Function to display the queue elements
void display() {
    struct Node* current = front;
    printf("Queue: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    enqueue(5);
    enqueue(3);
    enqueue(8);

    display();

    int dequeued = dequeue();
    printf("Dequeued: %d\n", dequeued);

    display();

    return 0;
}

18. Program to concatenate two linear linked list.

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to append a node to the end of the linked list
void appendNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to concatenate two linked lists
void concatenateLists(struct Node** firstList, struct Node* secondList) {
    if (*firstList == NULL) {
        *firstList = secondList;
    } else {
        struct Node* current = *firstList;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = secondList;
    }
}

// Function to display the linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
    } else {
        printf("Linked List: ");
        while (head != NULL) {
            printf("%d -> ", head->data);
            head = head->next;
        }
        printf("NULL\n");
    }
}

int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    appendNode(&list1, 5);
    appendNode(&list1, 3);
    appendNode(&list2, 8);
    appendNode(&list2, 10);

    printf("List 1:\n");
    displayList(list1);
    printf("List 2:\n");
    displayList(list2);

    concatenateLists(&list1, list2);

    printf("Concatenated List:\n");
    displayList(list1);

    return 0;
}

19. Program to accept a singly linked list of integers & sort the list in ascending order.

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to append a node to the end of the linked list
void appendNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to sort the linked list in ascending order using the bubble sort algorithm
void bubbleSort(struct Node* head) {
    if (head == NULL) {
        return;
    }

    int swapped;
    struct Node* current;
    struct Node* last = NULL;

    do {
        swapped = 0;
        current = head;

        while (current->next != last) {
            if (current->data > current->next->data) {
                // Swap data values
                int temp = current->data;
                current->data = current->next->data;
                current->next->data = temp;
                swapped = 1;
            }
            current = current->next;
        }
        last = current;
    } while (swapped);
}

// Function to display the linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
    } else {
        printf("Linked List: ");
        while (head != NULL) {
            printf("%d -> ", head->data);
            head = head->next;
        }
        printf("NULL\n");
    }
}

int main() {
    struct Node* head = NULL;

    appendNode(&head, 5);
    appendNode(&head, 3);
    appendNode(&head, 8);
    appendNode(&head, 2);

    printf("Original List:\n");
    displayList(head);

    bubbleSort(head);

    printf("Sorted List in Ascending Order:\n");
    displayList(head);

    return 0;
}

20. Program to reverse linked list.

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to append a node to the end of the linked list
void appendNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to reverse the linked list
void reverseList(struct Node** head) {
    struct Node* current = *head;
    struct Node* prev = NULL;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    *head = prev; // Update the head to point to the new first node
}

// Function to display the linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
    } else {
        printf("Linked List: ");
        while (head != NULL) {
            printf("%d -> ", head->data);
            head = head->next;
        }
        printf("NULL\n");
    }
}

int main() {
    struct Node* head = NULL;

    appendNode(&head, 5);
    appendNode(&head, 3);
    appendNode(&head, 8);

    printf("Original List:\n");
    displayList(head);

    reverseList(&head);

    printf("Reversed List:\n");
    displayList(head);

    return 0;
}


